{
  "contractName": "Upgradeable",
  "abi": [
    {
      "constant": true,
      "inputs": [],
      "name": "implementation",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "registry",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "initialize",
      "outputs": [],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "metadata": "{\"compiler\":{\"version\":\"0.5.9+commit.e560f70d\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"constant\":true,\"inputs\":[],\"name\":\"implementation\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"registry\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This contract holds all the minimum required functionality for a behavior to be upgradeable. This means, required state variables for owned upgradeability purpose and simple initialization validation.\",\"methods\":{\"implementation()\":{\"details\":\"Tells the address of the current implementation\",\"return\":\"address of the current implementation\"},\"initialize()\":{\"details\":\"Validates the caller is the versions registry. THIS FUNCTION SHOULD BE OVERRIDDEN CALLING SUPER\"}},\"title\":\"Upgradeable\"},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"/home/safu/minddeft/jointerInc/jointer-token/contracts/Proxy/Upgradeable.sol\":\"Upgradeable\"},\"evmVersion\":\"petersburg\",\"libraries\":{},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"/home/safu/minddeft/jointerInc/jointer-token/contracts/Proxy/IRegistry.sol\":{\"keccak256\":\"0x4046702de6033eac80487702f5a808005efdb7fd1154e589db40c8a1f42217c4\",\"urls\":[\"bzzr://4ad3e0b9d3ad8097be6704cd9e86d5cf7ec02a9024f743c5078724cb44485b23\",\"dweb:/ipfs/QmXzkfV2DNFVTe6Mx4eP7VzDKXPeanEjXeyJoo8pvDEUiJ\"]},\"/home/safu/minddeft/jointerInc/jointer-token/contracts/Proxy/UpgradeabilityStorage.sol\":{\"keccak256\":\"0x9bd4c0a689ff1715b2c59c7f2eed242b45c1b2b9692ee2c224c8769cbc578097\",\"urls\":[\"bzzr://66cfb3544d2e98885e1945faa49c005c47e7b87f5dcf6a9c8175c3b9539c7914\",\"dweb:/ipfs/QmcsUSeTXhy9zpjAkx7YvEDUmgpmT8gzkh3xJqsqHZCoY9\"]},\"/home/safu/minddeft/jointerInc/jointer-token/contracts/Proxy/Upgradeable.sol\":{\"keccak256\":\"0xdc6696f46d719826d9b42d7254d3e42c1a2de39722b8ef10c84d2fe4fecc9f59\",\"urls\":[\"bzzr://bcb5c4ad1cfed405c1b7ffc93439c52edf4e064fa19dad21a93e11c034ac77fa\",\"dweb:/ipfs/QmXfDMQKEzbg3d3EHXX4AVrzbawykwt7DPaKtpY8HQeTAZ\"]}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50610124806100206000396000f3fe6080604052348015600f57600080fd5b5060043610603c5760003560e01c80635c60da1b1460415780637b1039991460635780638129fc1c146069575b600080fd5b60476071565b604080516001600160a01b039092168252519081900360200190f35b60476080565b606f608f565b005b6001546001600160a01b031690565b6000546001600160a01b031681565b6000546001600160a01b0316331460ed576040805162461bcd60e51b815260206004820152601c60248201527f4552525f4f4e4c595f524547495354524552595f43414e5f43414c4c00000000604482015290519081900360640190fd5b56fea265627a7a72305820b187b6ea661e5620e607ac219d9d65ac2826bdf9ee64bbc66aa6e395add3966364736f6c63430005090032",
  "deployedBytecode": "0x6080604052348015600f57600080fd5b5060043610603c5760003560e01c80635c60da1b1460415780637b1039991460635780638129fc1c146069575b600080fd5b60476071565b604080516001600160a01b039092168252519081900360200190f35b60476080565b606f608f565b005b6001546001600160a01b031690565b6000546001600160a01b031681565b6000546001600160a01b0316331460ed576040805162461bcd60e51b815260206004820152601c60248201527f4552525f4f4e4c595f524547495354524552595f43414e5f43414c4c00000000604482015290519081900360640190fd5b56fea265627a7a72305820b187b6ea661e5620e607ac219d9d65ac2826bdf9ee64bbc66aa6e395add3966364736f6c63430005090032",
  "sourceMap": "308:307:23:-;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;308:307:23;;;;;;;",
  "deployedSourceMap": "308:307:23:-;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;308:307:23;;;;;;;;;;;;;;;;;;;;;;;;;;;;;498:95:22;;;:::i;:::-;;;;-1:-1:-1;;;;;498:95:22;;;;;;;;;;;;;;253:25;;;:::i;491:122:23:-;;;:::i;:::-;;498:95:22;571:15;;-1:-1:-1;;;;;571:15:22;498:95;:::o;253:25::-;;;-1:-1:-1;;;;;253:25:22;;:::o;491:122:23:-;565:8;;-1:-1:-1;;;;;565:8:23;543:10;:31;535:71;;;;;-1:-1:-1;;;535:71:23;;;;;;;;;;;;;;;;;;;;;;;;;;;;491:122::o",
  "source": "\npragma solidity ^0.5.9;\n\nimport './UpgradeabilityStorage.sol';\n\n\n/**\n * @title Upgradeable\n * @dev This contract holds all the minimum required functionality for a behavior to be upgradeable.\n * This means, required state variables for owned upgradeability purpose and simple initialization validation.\n */\ncontract Upgradeable is UpgradeabilityStorage {\n    /**\n     * @dev Validates the caller is the versions registry.\n     * THIS FUNCTION SHOULD BE OVERRIDDEN CALLING SUPER\n     */\n    function initialize() public view {\n        require(msg.sender == address(registry),\"ERR_ONLY_REGISTRERY_CAN_CALL\");\n    }\n}",
  "sourcePath": "/home/safu/minddeft/jointerInc/jointer-token/contracts/Proxy/Upgradeable.sol",
  "ast": {
    "absolutePath": "/home/safu/minddeft/jointerInc/jointer-token/contracts/Proxy/Upgradeable.sol",
    "exportedSymbols": {
      "Upgradeable": [
        8702
      ]
    },
    "id": 8703,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 8684,
        "literals": [
          "solidity",
          "^",
          "0.5",
          ".9"
        ],
        "nodeType": "PragmaDirective",
        "src": "1:23:23"
      },
      {
        "absolutePath": "/home/safu/minddeft/jointerInc/jointer-token/contracts/Proxy/UpgradeabilityStorage.sol",
        "file": "./UpgradeabilityStorage.sol",
        "id": 8685,
        "nodeType": "ImportDirective",
        "scope": 8703,
        "sourceUnit": 8683,
        "src": "26:37:23",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "baseContracts": [
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 8686,
              "name": "UpgradeabilityStorage",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 8682,
              "src": "332:21:23",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_UpgradeabilityStorage_$8682",
                "typeString": "contract UpgradeabilityStorage"
              }
            },
            "id": 8687,
            "nodeType": "InheritanceSpecifier",
            "src": "332:21:23"
          }
        ],
        "contractDependencies": [
          8682
        ],
        "contractKind": "contract",
        "documentation": "@title Upgradeable\n@dev This contract holds all the minimum required functionality for a behavior to be upgradeable.\nThis means, required state variables for owned upgradeability purpose and simple initialization validation.",
        "fullyImplemented": true,
        "id": 8702,
        "linearizedBaseContracts": [
          8702,
          8682
        ],
        "name": "Upgradeable",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "body": {
              "id": 8700,
              "nodeType": "Block",
              "src": "525:88:23",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "commonType": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "id": 8696,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "argumentTypes": null,
                          "expression": {
                            "argumentTypes": null,
                            "id": 8691,
                            "name": "msg",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 19868,
                            "src": "543:3:23",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_message",
                              "typeString": "msg"
                            }
                          },
                          "id": 8692,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "sender",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": null,
                          "src": "543:10:23",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address_payable",
                            "typeString": "address payable"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "==",
                        "rightExpression": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "id": 8694,
                              "name": "registry",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 8671,
                              "src": "565:8:23",
                              "typeDescriptions": {
                                "typeIdentifier": "t_contract$_IRegistry_$8589",
                                "typeString": "contract IRegistry"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_contract$_IRegistry_$8589",
                                "typeString": "contract IRegistry"
                              }
                            ],
                            "id": 8693,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "nodeType": "ElementaryTypeNameExpression",
                            "src": "557:7:23",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_address_$",
                              "typeString": "type(address)"
                            },
                            "typeName": "address"
                          },
                          "id": 8695,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "typeConversion",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "557:17:23",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "src": "543:31:23",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "hexValue": "4552525f4f4e4c595f524547495354524552595f43414e5f43414c4c",
                        "id": 8697,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "575:30:23",
                        "subdenomination": null,
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_9abd1510b8502afd155eeb213cc3d966e814ee8a1af5043c0204ed1fa6e9491c",
                          "typeString": "literal_string \"ERR_ONLY_REGISTRERY_CAN_CALL\""
                        },
                        "value": "ERR_ONLY_REGISTRERY_CAN_CALL"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_9abd1510b8502afd155eeb213cc3d966e814ee8a1af5043c0204ed1fa6e9491c",
                          "typeString": "literal_string \"ERR_ONLY_REGISTRERY_CAN_CALL\""
                        }
                      ],
                      "id": 8690,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        19871,
                        19872
                      ],
                      "referencedDeclaration": 19872,
                      "src": "535:7:23",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 8698,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "535:71:23",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 8699,
                  "nodeType": "ExpressionStatement",
                  "src": "535:71:23"
                }
              ]
            },
            "documentation": "@dev Validates the caller is the versions registry.\nTHIS FUNCTION SHOULD BE OVERRIDDEN CALLING SUPER",
            "id": 8701,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "initialize",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 8688,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "510:2:23"
            },
            "returnParameters": {
              "id": 8689,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "525:0:23"
            },
            "scope": 8702,
            "src": "491:122:23",
            "stateMutability": "view",
            "superFunction": null,
            "visibility": "public"
          }
        ],
        "scope": 8703,
        "src": "308:307:23"
      }
    ],
    "src": "1:614:23"
  },
  "legacyAST": {
    "absolutePath": "/home/safu/minddeft/jointerInc/jointer-token/contracts/Proxy/Upgradeable.sol",
    "exportedSymbols": {
      "Upgradeable": [
        8702
      ]
    },
    "id": 8703,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 8684,
        "literals": [
          "solidity",
          "^",
          "0.5",
          ".9"
        ],
        "nodeType": "PragmaDirective",
        "src": "1:23:23"
      },
      {
        "absolutePath": "/home/safu/minddeft/jointerInc/jointer-token/contracts/Proxy/UpgradeabilityStorage.sol",
        "file": "./UpgradeabilityStorage.sol",
        "id": 8685,
        "nodeType": "ImportDirective",
        "scope": 8703,
        "sourceUnit": 8683,
        "src": "26:37:23",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "baseContracts": [
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 8686,
              "name": "UpgradeabilityStorage",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 8682,
              "src": "332:21:23",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_UpgradeabilityStorage_$8682",
                "typeString": "contract UpgradeabilityStorage"
              }
            },
            "id": 8687,
            "nodeType": "InheritanceSpecifier",
            "src": "332:21:23"
          }
        ],
        "contractDependencies": [
          8682
        ],
        "contractKind": "contract",
        "documentation": "@title Upgradeable\n@dev This contract holds all the minimum required functionality for a behavior to be upgradeable.\nThis means, required state variables for owned upgradeability purpose and simple initialization validation.",
        "fullyImplemented": true,
        "id": 8702,
        "linearizedBaseContracts": [
          8702,
          8682
        ],
        "name": "Upgradeable",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "body": {
              "id": 8700,
              "nodeType": "Block",
              "src": "525:88:23",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "commonType": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "id": 8696,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "argumentTypes": null,
                          "expression": {
                            "argumentTypes": null,
                            "id": 8691,
                            "name": "msg",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 19868,
                            "src": "543:3:23",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_message",
                              "typeString": "msg"
                            }
                          },
                          "id": 8692,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "sender",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": null,
                          "src": "543:10:23",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address_payable",
                            "typeString": "address payable"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "==",
                        "rightExpression": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "id": 8694,
                              "name": "registry",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 8671,
                              "src": "565:8:23",
                              "typeDescriptions": {
                                "typeIdentifier": "t_contract$_IRegistry_$8589",
                                "typeString": "contract IRegistry"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_contract$_IRegistry_$8589",
                                "typeString": "contract IRegistry"
                              }
                            ],
                            "id": 8693,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "nodeType": "ElementaryTypeNameExpression",
                            "src": "557:7:23",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_address_$",
                              "typeString": "type(address)"
                            },
                            "typeName": "address"
                          },
                          "id": 8695,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "typeConversion",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "557:17:23",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "src": "543:31:23",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "hexValue": "4552525f4f4e4c595f524547495354524552595f43414e5f43414c4c",
                        "id": 8697,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "575:30:23",
                        "subdenomination": null,
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_9abd1510b8502afd155eeb213cc3d966e814ee8a1af5043c0204ed1fa6e9491c",
                          "typeString": "literal_string \"ERR_ONLY_REGISTRERY_CAN_CALL\""
                        },
                        "value": "ERR_ONLY_REGISTRERY_CAN_CALL"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_9abd1510b8502afd155eeb213cc3d966e814ee8a1af5043c0204ed1fa6e9491c",
                          "typeString": "literal_string \"ERR_ONLY_REGISTRERY_CAN_CALL\""
                        }
                      ],
                      "id": 8690,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        19871,
                        19872
                      ],
                      "referencedDeclaration": 19872,
                      "src": "535:7:23",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 8698,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "535:71:23",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 8699,
                  "nodeType": "ExpressionStatement",
                  "src": "535:71:23"
                }
              ]
            },
            "documentation": "@dev Validates the caller is the versions registry.\nTHIS FUNCTION SHOULD BE OVERRIDDEN CALLING SUPER",
            "id": 8701,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "initialize",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 8688,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "510:2:23"
            },
            "returnParameters": {
              "id": 8689,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "525:0:23"
            },
            "scope": 8702,
            "src": "491:122:23",
            "stateMutability": "view",
            "superFunction": null,
            "visibility": "public"
          }
        ],
        "scope": 8703,
        "src": "308:307:23"
      }
    ],
    "src": "1:614:23"
  },
  "compiler": {
    "name": "solc",
    "version": "0.5.9+commit.e560f70d.Emscripten.clang"
  },
  "networks": {},
  "schemaVersion": "3.1.0",
  "updatedAt": "2020-05-22T11:44:27.825Z",
  "devdoc": {
    "details": "This contract holds all the minimum required functionality for a behavior to be upgradeable. This means, required state variables for owned upgradeability purpose and simple initialization validation.",
    "methods": {
      "implementation()": {
        "details": "Tells the address of the current implementation",
        "return": "address of the current implementation"
      },
      "initialize()": {
        "details": "Validates the caller is the versions registry. THIS FUNCTION SHOULD BE OVERRIDDEN CALLING SUPER"
      }
    },
    "title": "Upgradeable"
  },
  "userdoc": {
    "methods": {}
  }
}